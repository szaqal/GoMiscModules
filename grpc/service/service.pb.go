// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package model

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type InParams struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InParams) Reset()         { *m = InParams{} }
func (m *InParams) String() string { return proto.CompactTextString(m) }
func (*InParams) ProtoMessage()    {}
func (*InParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0}
}

func (m *InParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InParams.Unmarshal(m, b)
}
func (m *InParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InParams.Marshal(b, m, deterministic)
}
func (m *InParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InParams.Merge(m, src)
}
func (m *InParams) XXX_Size() int {
	return xxx_messageInfo_InParams.Size(m)
}
func (m *InParams) XXX_DiscardUnknown() {
	xxx_messageInfo_InParams.DiscardUnknown(m)
}

var xxx_messageInfo_InParams proto.InternalMessageInfo

type ServiceResponse struct {
	// 1,2 defines unique "tag"
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Success              bool     `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServiceResponse) Reset()         { *m = ServiceResponse{} }
func (m *ServiceResponse) String() string { return proto.CompactTextString(m) }
func (*ServiceResponse) ProtoMessage()    {}
func (*ServiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{1}
}

func (m *ServiceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceResponse.Unmarshal(m, b)
}
func (m *ServiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceResponse.Marshal(b, m, deterministic)
}
func (m *ServiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceResponse.Merge(m, src)
}
func (m *ServiceResponse) XXX_Size() int {
	return xxx_messageInfo_ServiceResponse.Size(m)
}
func (m *ServiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceResponse proto.InternalMessageInfo

func (m *ServiceResponse) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ServiceResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*InParams)(nil), "model.InParams")
	proto.RegisterType((*ServiceResponse)(nil), "model.ServiceResponse")
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 154 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xcd, 0xcd, 0x4f, 0x49, 0xcd,
	0x51, 0xe2, 0xe2, 0xe2, 0xf0, 0xcc, 0x0b, 0x48, 0x2c, 0x4a, 0xcc, 0x2d, 0x56, 0xb2, 0xe6, 0xe2,
	0x0f, 0x86, 0xa8, 0x09, 0x4a, 0x2d, 0x2e, 0xc8, 0xcf, 0x2b, 0x4e, 0x15, 0xe2, 0xe3, 0x62, 0xca,
	0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x0d, 0x62, 0xca, 0x4c, 0x11, 0x92, 0xe0, 0x62, 0x2f,
	0x2e, 0x4d, 0x4e, 0x4e, 0x2d, 0x2e, 0x96, 0x60, 0x52, 0x60, 0xd4, 0xe0, 0x08, 0x82, 0x71, 0x8d,
	0x5c, 0xb9, 0xb8, 0x83, 0xf3, 0x73, 0x53, 0xa1, 0x06, 0x08, 0x99, 0x71, 0xb1, 0x17, 0xa4, 0x16,
	0xa5, 0xe5, 0x17, 0xe5, 0x0a, 0xf1, 0xeb, 0x81, 0xad, 0xd2, 0x83, 0xd9, 0x23, 0x25, 0x06, 0x15,
	0x40, 0xb3, 0x4c, 0x89, 0xc1, 0x80, 0x31, 0x89, 0x0d, 0xec, 0x3a, 0x63, 0x40, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x27, 0x44, 0x35, 0x07, 0xae, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SomeServiceClient is the client API for SomeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SomeServiceClient interface {
	Perform(ctx context.Context, in *InParams, opts ...grpc.CallOption) (SomeService_PerformClient, error)
}

type someServiceClient struct {
	cc *grpc.ClientConn
}

func NewSomeServiceClient(cc *grpc.ClientConn) SomeServiceClient {
	return &someServiceClient{cc}
}

func (c *someServiceClient) Perform(ctx context.Context, in *InParams, opts ...grpc.CallOption) (SomeService_PerformClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SomeService_serviceDesc.Streams[0], "/model.SomeService/perform", opts...)
	if err != nil {
		return nil, err
	}
	x := &someServicePerformClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SomeService_PerformClient interface {
	Recv() (*ServiceResponse, error)
	grpc.ClientStream
}

type someServicePerformClient struct {
	grpc.ClientStream
}

func (x *someServicePerformClient) Recv() (*ServiceResponse, error) {
	m := new(ServiceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SomeServiceServer is the server API for SomeService service.
type SomeServiceServer interface {
	Perform(*InParams, SomeService_PerformServer) error
}

// UnimplementedSomeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSomeServiceServer struct {
}

func (*UnimplementedSomeServiceServer) Perform(req *InParams, srv SomeService_PerformServer) error {
	return status.Errorf(codes.Unimplemented, "method Perform not implemented")
}

func RegisterSomeServiceServer(s *grpc.Server, srv SomeServiceServer) {
	s.RegisterService(&_SomeService_serviceDesc, srv)
}

func _SomeService_Perform_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InParams)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SomeServiceServer).Perform(m, &someServicePerformServer{stream})
}

type SomeService_PerformServer interface {
	Send(*ServiceResponse) error
	grpc.ServerStream
}

type someServicePerformServer struct {
	grpc.ServerStream
}

func (x *someServicePerformServer) Send(m *ServiceResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _SomeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "model.SomeService",
	HandlerType: (*SomeServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "perform",
			Handler:       _SomeService_Perform_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}
